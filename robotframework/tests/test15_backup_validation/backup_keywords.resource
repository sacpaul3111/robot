*** Settings ***
Documentation    Keywords for Backup Validation Test Suite
Library          Collections
Library          OperatingSystem
Library          String
Library          DateTime
Library          ../../libraries/VCenterAPILibrary.py
Library          ../../libraries/BackupValidator.py

*** Keywords ***
Initialize Backup Validation Test Environment
    [Documentation]    Initialize test environment for backup validation
    Log    üöÄ Initializing Backup Validation Test Environment...    console=yes

    # Initialize vCenter API connection variables
    Set Global Variable    ${VCENTER_API_CONN}    ${None}

    # Initialize test result tracking
    Set Global Variable    ${TEST_START_TIME}    ${EMPTY}
    ${start_time}=    Get Current Date    result_format=%Y-%m-%d %H:%M:%S
    Set Global Variable    ${TEST_START_TIME}    ${start_time}

    # Create directories for data collection
    Create Directory    ${TEST15_RESULTS_DIR}
    Create Directory    ${TEST15_DATA_DIR}

    Log    ‚úÖ Test environment initialized at ${TEST_START_TIME}    console=yes

Connect To vCenter API
    [Documentation]    Establish connection to vCenter REST API
    Log    üîó Connecting to vCenter API: ${VCENTER_SERVER}    console=yes

    # Connect to vCenter API using library
    ${success}=    Connect To Vcenter Api    ${VCENTER_SERVER}    ${VCENTER_USERNAME}    ${VCENTER_PASSWORD}
    Set Global Variable    ${VCENTER_API_CONN}    ${success}

    Log    ‚úÖ Connected to vCenter API: ${VCENTER_SERVER}    console=yes
    RETURN    ${success}

Verify vCenter API Connection
    [Documentation]    Verify vCenter API connection is active
    Log    üîç Verifying vCenter API connection status...    console=yes

    # Verify connection
    ${status}=    Verify Vcenter Api Connection

    Log    ‚úÖ vCenter API connection verified: ${status}    console=yes
    RETURN    ${status}

Collect Backup Policy Configuration
    [Documentation]    Collect VM backup policy configuration via API
    Log    üìä Collecting backup policy configuration via API...    console=yes

    # Collect backup policies
    ${policies}=    Collect Backup Policy Configuration    ${TARGET_VMS}

    ${count}=    Get Length    ${policies}
    Log    üìä Collected backup policies for ${count} VMs    console=yes

    RETURN    ${policies}

Collect Backup Schedule Settings
    [Documentation]    Collect backup schedule settings via API
    Log    üìä Collecting backup schedule settings via API...    console=yes

    # Collect schedules
    ${schedules}=    Collect Backup Schedule Settings    ${TARGET_VMS}

    ${count}=    Get Length    ${schedules}
    Log    üìä Collected backup schedules for ${count} VMs    console=yes

    RETURN    ${schedules}

Collect Recent Backup Job Status
    [Documentation]    Collect recent backup job status via API
    Log    üìä Collecting recent backup job status via API...    console=yes

    # Collect job status
    ${jobs}=    Collect Recent Backup Job Status    ${TARGET_VMS}    ${BACKUP_LOOKBACK_DAYS}

    ${count}=    Get Length    ${jobs}
    Log    üìä Collected ${count} recent backup jobs    console=yes

    RETURN    ${jobs}

Collect Retention Policy Settings
    [Documentation]    Collect retention policy settings via API
    Log    üìä Collecting retention policy settings via API...    console=yes

    # Collect retention policies
    ${retention}=    Collect Retention Policy Settings    ${TARGET_VMS}

    ${count}=    Get Length    ${retention}
    Log    üìä Collected retention policies for ${count} VMs    console=yes

    RETURN    ${retention}

Collect Latest Backup Timestamps
    [Documentation]    Collect latest successful backup timestamps via API
    Log    üìä Collecting latest backup timestamps via API...    console=yes

    # Collect timestamps
    ${timestamps}=    Collect Latest Backup Timestamps    ${TARGET_VMS}

    ${count}=    Get Length    ${timestamps}
    Log    üìä Collected latest backup timestamps for ${count} VMs    console=yes

    RETURN    ${timestamps}

Collect Offsite Replication Status
    [Documentation]    Collect offsite replication status via API
    Log    üìä Collecting offsite replication status via API...    console=yes

    # Collect replication status
    ${replication}=    Collect Offsite Replication Status    ${TARGET_VMS}

    ${count}=    Get Length    ${replication}
    Log    üìä Collected offsite replication status for ${count} VMs    console=yes

    RETURN    ${replication}

Validate Backup Policy Applied
    [Documentation]    Validate all VMs have appropriate backup policies applied
    [Arguments]    ${policy_data}
    Log    ‚úÖ Validating backup policy application...    console=yes

    # Validate policies
    ${results}=    Validate Backup Policy Applied    ${policy_data}

    ${violations}=    Get From Dictionary    ${results}    violations
    ${violation_count}=    Get Length    ${violations}
    Log    üìä Validation complete: ${violation_count} violations found    console=yes

    RETURN    ${results}

Validate Schedule Alignment With RPO
    [Documentation]    Validate backup schedules meet RPO requirements
    [Arguments]    ${schedule_data}
    Log    ‚úÖ Validating schedule alignment with RPO requirements...    console=yes

    # Validate schedules
    ${results}=    Validate Schedule Alignment With Rpo    ${schedule_data}    ${RPO_REQUIREMENTS}    ${VM_CRITICALITY}

    ${rpo_violations}=    Get From Dictionary    ${results}    rpo_violations
    ${rpo_violation_count}=    Get Length    ${rpo_violations}
    Log    üìä Validation complete: ${rpo_violation_count} RPO violations found    console=yes

    RETURN    ${results}

Validate Retention Settings Compliance
    [Documentation]    Validate retention settings meet compliance standards
    [Arguments]    ${retention_data}
    Log    ‚úÖ Validating retention settings compliance...    console=yes

    # Validate retention
    ${results}=    Validate Retention Settings Compliance    ${retention_data}    ${MIN_DAILY_RETENTION}    ${MIN_WEEKLY_RETENTION}    ${MIN_MONTHLY_RETENTION}

    ${violations}=    Get From Dictionary    ${results}    violations
    ${violation_count}=    Get Length    ${violations}
    Log    üìä Validation complete: ${violation_count} violations found    console=yes

    RETURN    ${results}

Validate Recent Job Completion Status
    [Documentation]    Validate recent backup jobs completed successfully
    [Arguments]    ${job_status}
    Log    ‚úÖ Validating recent backup job completion status...    console=yes

    # Validate job completion
    ${results}=    Validate Recent Job Completion Status    ${job_status}

    ${failed_jobs}=    Get From Dictionary    ${results}    failed_jobs
    ${failed_count}=    Get Length    ${failed_jobs}
    Log    üìä Validation complete: ${failed_count} failed jobs found    console=yes

    RETURN    ${results}

Validate Backup Recency
    [Documentation]    Validate backups are recent and within acceptable time windows
    [Arguments]    ${timestamp_data}
    Log    ‚úÖ Validating backup recency...    console=yes

    # Validate recency
    ${results}=    Validate Backup Recency    ${timestamp_data}    ${MAX_BACKUP_AGE_HOURS}

    ${stale_backups}=    Get From Dictionary    ${results}    stale_backups
    ${stale_count}=    Get Length    ${stale_backups}
    Log    üìä Validation complete: ${stale_count} stale backups found    console=yes

    RETURN    ${results}

Validate Offsite Replication Configuration
    [Documentation]    Validate offsite replication is enabled for critical VMs
    [Arguments]    ${replication_data}
    Log    ‚úÖ Validating offsite replication configuration...    console=yes

    # Validate offsite replication
    ${results}=    Validate Offsite Replication Configuration    ${replication_data}    ${OFFSITE_REQUIRED_VMS}

    ${violations}=    Get From Dictionary    ${results}    violations
    ${violation_count}=    Get Length    ${violations}
    Log    üìä Validation complete: ${violation_count} violations found    console=yes

    RETURN    ${results}

Validate Complete Backup Compliance
    [Documentation]    Perform comprehensive backup compliance validation
    Log    üîç Performing comprehensive backup compliance validation...    console=yes

    # Validate all aspects
    ${policy_validation}=    Validate Backup Policy Applied    ${POLICY_DATA}
    ${rpo_validation}=    Validate Schedule Alignment With RPO    ${SCHEDULE_DATA}
    ${retention_validation}=    Validate Retention Settings Compliance    ${RETENTION_DATA}
    ${job_validation}=    Validate Recent Job Completion Status    ${JOB_STATUS}
    ${recency_validation}=    Validate Backup Recency    ${TIMESTAMP_DATA}
    ${offsite_validation}=    Validate Offsite Replication Configuration    ${REPLICATION_DATA}

    # Aggregate results
    ${total_violations}=    Evaluate    ${policy_validation}['violations'].__len__() + ${rpo_validation}['rpo_violations'].__len__() + ${retention_validation}['violations'].__len__() + ${job_validation}['failed_jobs'].__len__() + ${recency_validation}['stale_backups'].__len__() + ${offsite_validation}['violations'].__len__()

    IF    ${total_violations} > 0
        Log    ‚ö†Ô∏è Comprehensive validation found ${total_violations} total issues    console=yes
    ELSE
        Log    ‚úÖ Comprehensive validation: All checks passed    console=yes
    END

    RETURN    ${total_violations}

Generate Backup Validation Executive Summary
    [Documentation]    Generate executive summary report for backup validation test
    Log    üìä Generating Backup Validation Executive Summary...    console=yes

    # Get test end time
    ${end_time}=    Get Current Date    result_format=%Y-%m-%d %H:%M:%S
    Set Global Variable    ${TEST_END_TIME}    ${end_time}

    # Generate summary report
    ${summary_file}=    Set Variable    ${TEST15_RESULTS_DIR}/Test15_Backup_Validation_Executive_Summary.txt

    ${summary_content}=    Catenate    SEPARATOR=\n
    ...    ========================================
    ...    üíæ TEST-15: BACKUP VALIDATION
    ...    üìä EXECUTIVE SUMMARY REPORT
    ...    ========================================
    ...
    ...    üìÖ Report Generated: ${end_time}
    ...    üéØ vCenter Server: ${VCENTER_SERVER}
    ...    üìã Test Suite: Test-15 Backup Configuration Validation
    ...
    ...    ========================================
    ...    üìã TEST OBJECTIVES
    ...    ========================================
    ...    1. Connect to vCenter REST API
    ...    2. Collect backup configuration via API calls
    ...    3. Validate backup compliance against standards
    ...
    ...    ========================================
    ...    üìä VALIDATION SCOPE
    ...    ========================================
    ...    ‚úÖ Backup policy application
    ...    ‚úÖ Schedule alignment with RPO
    ...    ‚úÖ Retention settings compliance
    ...    ‚úÖ Recent job completion status
    ...    ‚úÖ Backup recency validation
    ...    ‚úÖ Offsite replication configuration
    ...
    ...    ========================================
    ...    üìã TARGET VMS
    ...    ========================================

    FOR    ${vm}    IN    @{TARGET_VMS}
        ${summary_content}=    Catenate    SEPARATOR=\n    ${summary_content}    ...    üñ•Ô∏è ${vm}
    END

    ${summary_content}=    Catenate    SEPARATOR=\n    ${summary_content}
    ...
    ...    ========================================
    ...    üîç COMPLIANCE REQUIREMENTS
    ...    ========================================
    ...    üìÖ Maximum backup age: ${MAX_BACKUP_AGE_HOURS} hours
    ...    üíæ Minimum daily retention: ${MIN_DAILY_RETENTION} days
    ...    üì¶ Minimum weekly retention: ${MIN_WEEKLY_RETENTION} weeks
    ...    üåê Offsite replication: Required for critical VMs
    ...
    ...    ========================================
    ...    ‚úÖ VALIDATION RESULTS
    ...    ========================================
    ...
    ...    Results available in detailed test reports.
    ...
    ...    ========================================
    ...    üìÅ SUPPORTING DOCUMENTATION
    ...    ========================================
    ...    üìÑ API data collected in JSON format
    ...    üìä Robot Framework reports: ${TEST15_RESULTS_DIR}/
    ...
    ...    ========================================
    ...    üèÜ COMPLIANCE STATUS
    ...    ========================================
    ...    ‚úÖ Test execution completed successfully
    ...    üíæ Backup policies validated
    ...    üìÖ Schedule compliance verified
    ...    üóÑÔ∏è Retention settings confirmed
    ...    üåê Offsite replication validated
    ...    üîç Results ready for stakeholder review
    ...
    ...    End of Executive Summary
    ...    ========================================

    Create File    ${summary_file}    ${summary_content}
    Log    üìä Executive summary generated: ${summary_file}    console=yes
    Log    ‚úÖ Test-15 Backup Validation completed successfully!    console=yes

    # Disconnect from vCenter API
    IF    ${VCENTER_API_CONN}
        Disconnect From Vcenter Api
        Log    üîå Disconnected from vCenter API    console=yes
    END

Log Test Start
    [Documentation]    üìù Log the start of a test case
    [Arguments]    ${test_name}
    Log    üèÅ Starting: ${test_name}    console=yes

Log Test End
    [Documentation]    üìù Log the end of a test case
    [Arguments]    ${test_name}    ${test_status}
    IF    "${test_status}" == "PASS"
        Log    ‚úÖ Completed: ${test_name} - ${test_status}    console=yes
    ELSE
        Log    ‚ùå Completed: ${test_name} - ${test_status}    console=yes
    END