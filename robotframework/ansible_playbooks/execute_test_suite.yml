---
#############################################################################
# Ansible Task File: Execute Individual Test Suite
# Description: Runs a single Robot Framework test suite
# This file is included by run_tests.yml
#############################################################################

- name: Extract test suite information
  set_fact:
    test_suite_path: "{{ test_dir.path }}"
    test_suite_name: "{{ test_dir.path | basename }}"
    test_suite_id: "{{ test_dir.path | basename | regex_replace('^(test[0-9]+)_.*', '\\1') }}"

- name: Display test suite being executed
  debug:
    msg:
      - "========================================================"
      - "Executing: {{ test_suite_name }}"
      - "Test ID:   {{ test_suite_id }}"
      - "========================================================"

- name: Create test suite output directory
  file:
    path: "{{ robot_project_dir }}/{{ robot_output_dir }}/{{ test_suite_name }}"
    state: directory
    mode: '0755'

- name: Find robot file in test suite directory
  find:
    paths: "{{ test_suite_path }}"
    patterns: '*.robot'
    file_type: file
  register: robot_files

- name: Skip if no robot file found
  debug:
    msg: "⚠️  No .robot file found in {{ test_suite_name }}, skipping..."
  when: robot_files.files | length == 0

- name: Execute Robot Framework test suite
  command: >
    {{ python_executable }} -m robot
    --variable TARGET_HOSTNAME:{{ target_hostname }}
    --variable TEST_SUITE_ID:{{ test_suite_id }}
    --outputdir {{ robot_project_dir }}/{{ robot_output_dir }}/{{ test_suite_name }}
    {{ robot_files.files[0].path }}
  args:
    chdir: "{{ robot_project_dir }}"
  environment:
    # All credentials and configuration from environment variables
    SSH_USERNAME: "{{ lookup('env', 'SSH_USERNAME') }}"
    SSH_PASSWORD: "{{ lookup('env', 'SSH_PASSWORD') }}"
    VCENTER_USERNAME: "{{ lookup('env', 'VCENTER_USERNAME') }}"
    VCENTER_PASSWORD: "{{ lookup('env', 'VCENTER_PASSWORD') }}"
    VCENTER_SERVER: "{{ lookup('env', 'VCENTER_SERVER') }}"
    SPLUNK_USERNAME: "{{ lookup('env', 'SPLUNK_USERNAME') }}"
    SPLUNK_PASSWORD: "{{ lookup('env', 'SPLUNK_PASSWORD') }}"
    SPLUNK_SERVER: "{{ lookup('env', 'SPLUNK_SERVER') }}"
    SPLUNK_PORT: "{{ lookup('env', 'SPLUNK_PORT') }}"
    CYBERARK_USERNAME: "{{ lookup('env', 'CYBERARK_USERNAME') }}"
    CYBERARK_PASSWORD: "{{ lookup('env', 'CYBERARK_PASSWORD') }}"
    CYBERARK_SERVER: "{{ lookup('env', 'CYBERARK_SERVER') }}"
    CYBERARK_SAFE: "{{ lookup('env', 'CYBERARK_SAFE') }}"
    TANIUM_USERNAME: "{{ lookup('env', 'TANIUM_USERNAME') }}"
    TANIUM_PASSWORD: "{{ lookup('env', 'TANIUM_PASSWORD') }}"
    TANIUM_SERVER: "{{ lookup('env', 'TANIUM_SERVER') }}"
    TANIUM_PORT: "{{ lookup('env', 'TANIUM_PORT') }}"
    ANSIBLE_TOWER_USERNAME: "{{ lookup('env', 'ANSIBLE_TOWER_USERNAME') }}"
    ANSIBLE_TOWER_PASSWORD: "{{ lookup('env', 'ANSIBLE_TOWER_PASSWORD') }}"
    ANSIBLE_TOWER_SERVER: "{{ lookup('env', 'ANSIBLE_TOWER_SERVER') }}"
    ANSIBLE_TOWER_PORT: "{{ lookup('env', 'ANSIBLE_TOWER_PORT') }}"
    RSA_SERVER: "{{ lookup('env', 'RSA_SERVER') }}"
    RSA_PORT: "{{ lookup('env', 'RSA_PORT') }}"
    SMTP_SERVER: "{{ lookup('env', 'SMTP_SERVER') }}"
    SMTP_PORT: "{{ lookup('env', 'SMTP_PORT') }}"
    TEST_EMAIL_RECIPIENT: "{{ lookup('env', 'TEST_EMAIL_RECIPIENT') }}"
    NTP_SERVER: "{{ lookup('env', 'NTP_SERVER') }}"
    EDS_FILE_PATH: "{{ lookup('env', 'EDS_FILE_PATH') }}"
    EDS_SHEET_NAME: "{{ lookup('env', 'EDS_SHEET_NAME') }}"
    ROBOT_TIMEOUT: "{{ lookup('env', 'ROBOT_TIMEOUT') }}"
    ROBOT_LOG_LEVEL: "{{ lookup('env', 'ROBOT_LOG_LEVEL') }}"
  register: robot_execution
  ignore_errors: yes
  when: robot_files.files | length > 0

- name: Check if output.xml was created
  stat:
    path: "{{ robot_project_dir }}/{{ robot_output_dir }}/{{ test_suite_name }}/output.xml"
  register: output_xml_stat
  when: robot_files.files | length > 0

- name: Add output file to consolidation list
  set_fact:
    all_output_files: "{{ all_output_files + [robot_project_dir + '/' + robot_output_dir + '/' + test_suite_name + '/output.xml'] }}"
  when:
    - robot_files.files | length > 0
    - output_xml_stat.stat.exists

- name: Parse test results from output.xml
  xml:
    path: "{{ robot_project_dir }}/{{ robot_output_dir }}/{{ test_suite_name }}/output.xml"
    xpath: /robot/statistics/total/stat
    content: attribute
  register: test_statistics
  when:
    - robot_files.files | length > 0
    - output_xml_stat.stat.exists
  ignore_errors: yes

- name: Extract pass/fail counts
  set_fact:
    suite_passed: "{{ test_statistics.matches[0].stat.pass | default('0') | int }}"
    suite_failed: "{{ test_statistics.matches[0].stat.fail | default('0') | int }}"
    suite_total: "{{ (test_statistics.matches[0].stat.pass | default('0') | int) + (test_statistics.matches[0].stat.fail | default('0') | int) }}"
  when:
    - robot_files.files | length > 0
    - output_xml_stat.stat.exists
    - test_statistics.matches is defined
    - test_statistics.matches | length > 0

- name: Update overall test counters
  set_fact:
    total_tests: "{{ total_tests | int + suite_total | default(0) | int }}"
    passed_tests: "{{ passed_tests | int + suite_passed | default(0) | int }}"
    failed_tests: "{{ failed_tests | int + suite_failed | default(0) | int }}"
  when:
    - robot_files.files | length > 0
    - output_xml_stat.stat.exists

- name: Determine suite status
  set_fact:
    suite_status: "{{ 'PASSED ✅' if (suite_failed | default(1) | int == 0) else 'FAILED ❌' }}"
  when:
    - robot_files.files | length > 0
    - output_xml_stat.stat.exists

- name: Record test suite result
  set_fact:
    test_results: "{{ test_results + ['[' + test_suite_id + '] ' + test_suite_name + ': ' + suite_status + ' (' + suite_passed|default('0')|string + '/' + suite_total|default('0')|string + ' passed)'] }}"
  when:
    - robot_files.files | length > 0
    - output_xml_stat.stat.exists

- name: Display test suite result
  debug:
    msg:
      - "Test Suite: {{ test_suite_name }}"
      - "Status:     {{ suite_status | default('SKIPPED') }}"
      - "Passed:     {{ suite_passed | default(0) }}"
      - "Failed:     {{ suite_failed | default(0) }}"
      - "Total:      {{ suite_total | default(0) }}"
  when: robot_files.files | length > 0
